#!/bin/bash
TARGET_DIR="$HOME/screenlog"
PIDFILE="$TARGET_DIR/.$(basename "$0").pid"
CURRENT_NOTE_FILE="$TARGET_DIR/current_note"
LAST_PREFIX_FILE="$TARGET_DIR/last_prefix"
INTERVAL="$((60*5))" # take a screenshot every 5 minutes
DATE_DIR_FORMAT='+%Y-%m-%d_%A'
DATE_FILE_FORMAT='+%H-%M-%S'
SELF=$(readlink -e "$0")

if [ -z "$*" ]; then
    cat <<EOF
Usage: $(basename "$0") <command> [args]
Supported commands are:
    start [-d n] [-q] - Start taking screenshots
    stop          - Stop taking screenshots
    restart       - Restart screenlog
    status        - Show running status
    take          - Take screenshot
    last          - Display last screenshot
    rm            - Remove last screenshot
    list [date]   - List screenshots at date (default: today)
    time [date]   - List spent time by activity at date (default: today)
    view [date]   - View screenshots at date (default: today)
    show [string] - List spent time on matching activity
    rename <note> - Changes last screenshot annotation
    annotate [-d date] [-f from_time] [-t to_time] [-n] - Bulk rename
                    -d defaults to today
                    -f,-t are expressions in sed regex range. use
                       something like -f 14: -t 15: to rename all
                       screenshots starting from 14:00 but before 15:00
                    -n do not rename, just display potential renames

Requires scrot, zenity and rename (from util-linux) to work propperly.
EOF
    exit 255
fi

function running {
    if [ -e "$PIDFILE" ]; then
        ps $(cat "$PIDFILE") 2>&1 >/dev/null || rm "$PIDFILE"
    fi
    [ -e "$PIDFILE" ]
}

function set_note {
    echo "$*" > "$CURRENT_NOTE_FILE"
}

function set_last_prefix {
    [ $# -eq 1 ] || { echo "Error: set_last_prefix requires 1 argument"; exit 1; }
    echo "$1" > "$LAST_PREFIX_FILE"
}

function rm_last {
    N=${1:-1}
    cd "$TARGET_DIR/$(date "$DATE_DIR_FORMAT")"
    ls |tail -${N}|head -1|xargs -d "\n" rm
}

function show_last {
    N=${1:-1}
    cd "$TARGET_DIR/$(date "$DATE_DIR_FORMAT")"
    ls |tail -${N}|head -1|xargs -d "\n" sxiv
}

function make_filename { # (prefix, note)
    PREFIX=$1
    NOTE=$2
    echo "$PREFIX ($NOTE).png"
}

function current_note {
    cat "$CURRENT_NOTE_FILE"
}

function last_prefix {
    cat "$LAST_PREFIX_FILE"
}

function rename_last {
    [ -n "$1" ] || return # note should not be empty
    NEW_NOTE=$1
    NOTE="$(current_note)"
    PREFIX="$(last_prefix)"
    if [ "$NEW_NOTE" != "$NOTE" ]; then
        set_note "$NEW_NOTE"
        mv "$(make_filename "$PREFIX" "$NOTE")" "$(make_filename "$PREFIX" "$NEW_NOTE")"
    fi
}

function take_screenshot {
    DAY_DIR="$TARGET_DIR/$(date "$DATE_DIR_FORMAT")"
    [ -d "$DAY_DIR" ] || mkdir -p "$DAY_DIR"
    NOTE="$(current_note)"
    PREFIX="${DAY_DIR}/$(date "$DATE_FILE_FORMAT")"
    FILENAME="$(make_filename "$PREFIX" "$NOTE")"
    import -window root "$FILENAME"
    set_last_prefix "$PREFIX"
}

function take_screenshots {
    ASK_RENAME=true
    DELAY=0
    while getopts d:q name; do
        case "$name" in
        d) DELAY="$OPTARG";;
        q) ASK_RENAME='';;
        esac
    done
    SLEEP_PID=''
    trap 'kill ${SLEEP_PID}; rm ${PIDFILE}; trap - INT QUIT TERM EXIT; exit' INT QUIT TERM EXIT
    if [ "$DELAY" -gt 0 ]; then
        sleep "$DELAY" &
        SLEEP_PID="$!"
        wait "$SLEEP_PID"
    fi
    while true; do
        "$SELF" take
        NOTE="$(current_note)"
        if [ -n "$ASK_RENAME" ]; then
            DURATION="$(date -u -d "@$(expr $(date +%s) - $(stat -c %Z "$CURRENT_NOTE_FILE"))" +%R)"
            MESSAGE="What you have been doing now, at $(date +%R) ?\nCurrent streak: $DURATION"
            NEW_NOTE="$(zenity --entry --entry-text="$NOTE" --text="$MESSAGE" || echo "$NOTE" )"
        else
            if [ "$(current_note|cut -c 1)" == "?" ];then
                NEW_NOTE="$NOTE"
            else
                NEW_NOTE="?$NOTE"
            fi
            notify-send 'Took screenshot' "$NEW_NOTE"
        fi
        rename_last "$NEW_NOTE"
        sleep $INTERVAL &
        SLEEP_PID="$!"
        wait "$SLEEP_PID"
    done
}

function start_taking_screenshots {
    if running ; then
        echo "Screenlog is already running as process $(cat ${PIDFILE})"
    else
        take_screenshots "$@" &
        echo $! > "$PIDFILE"
        echo "Started taking screenshots"
    fi
}

function stop_taking_screenshots {
    if running ; then
        PID="$(cat "$PIDFILE")"
        kill "$PID"
        while kill -0 $PID 2>/dev/null ; do
            sleep 0.1
        done
        echo "Stopped taking screenshots"
    else
        echo "Screenlog is not running"
    fi
}

function status {
    if [ -e "$PIDFILE" ]; then
        cat "$PIDFILE"
        ps `cat "$PIDFILE"`
    else
        echo "Screenlog is stopped"
    fi
}

function list_at_date {
    DAY_DIR="$TARGET_DIR/$(date -d "$1" "$DATE_DIR_FORMAT" )"
    ls -1 "$DAY_DIR" | sed -E 's/\).png$//; s/^(..)-(..)-(..) \(/\1:\2 - /;'
}

function view_at_date {
    DAY_DIR="$TARGET_DIR/$(date -d "$1" "$DATE_DIR_FORMAT" )"
    cd "$DAY_DIR"
    ls -1| xargs -d "\n" sxiv
}

function list_to_timings {
    sort | uniq -c | awk '
    { allmin = $i*5;
      m = allmin % 60;
      h = (allmin - m)/60;
      $1 = sprintf("%d:%02d",h, m);
      print
    }' | sort -n
}

function time_at_date {
    "$SELF" list "$1" | sed -E 's/^..:.. - //' | list_to_timings
}

function show_matching {
    cd "$TARGET_DIR"
    find -name '*.png'|grep "$*"|sed -E 's/^.\/[^/]+\///;s/\).png$//; s/^(..)-(..)-(..) \(//;'| list_to_timings
}

function annotate {
    RENAME_CMD='perl-rename -v'
    DATE_D='today'
    FROM=''
    TO='end'
    while getopts d:f:t:n name; do
        case "$name" in
        d) DATE_D="$OPTARG";;
        f) FROM="$OPTARG";;
        t) TO="$OPTARG";;
        n) RENAME_CMD="$RENAME_CMD -n";;
        esac
    done
    shift $(($OPTIND-1))
    MESSAGE="$*"
    echo "date:$DATE_D from:$FROM to:$TO"
    pushd "$TARGET_DIR/$(date -d "$DATE_D" "$DATE_DIR_FORMAT")"
    ls | sed -n -e "/^${FROM}/,/^${TO}/p" | xargs -d "\n" $RENAME_CMD "s/\(.*\)/(${MESSAGE})/" --
    popd
}

CMD="$1"
shift

case "$CMD" in
    "take")
        take_screenshot
        ;;
    "rm")
        rm_last "$@"
        ;;
    "last")
        show_last "$@"
        ;;
    "show")
        show_matching "$@"
        ;;
    "start")
        start_taking_screenshots "$@"
        ;;
    "stop")
        stop_taking_screenshots
        ;;
    "restart")
        stop_taking_screenshots
        exec "$SELF" start "$@"
        ;;
    "status")
        status
        ;;
    "time")
        time_at_date "$@"
        ;;
    "view")
        view_at_date "$@"
        ;;
    "list")
        list_at_date "$@"
        ;;
    "rename")
        rename_last "$*"
        ;;
    "annotate")
        annotate "$@"
        ;;
    *)
        echo "unknown command \"$CMD\"" 1>&2
        exit 1
        ;;
esac
