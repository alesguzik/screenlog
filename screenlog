#!/bin/bash
TARGET_DIR="$HOME/screenlog"
PIDFILE="$TARGET_DIR/.$(basename "$0").pid"
CURRENT_NOTE="$TARGET_DIR/current_note"
INTERVAL="$((60*5))" # take a screenshot every 5 minutes
DATE_DIR_FORMAT='+%Y-%m-%d_%A'
DATE_FILE_FORMAT='+%H-%M-%S'
SELF=$(readlink -e "$0")

if [ -z "$*" ]; then
    cat <<EOF
Usage: $(basename "$0") <command> [args]
Supported commands are:
    start [-d n]  - Start taking screenshots
    stop          - Stop taking screenshots
    take          - Take screenshot
Requires zenity and rename (non-perl, util-linux one) to work propperly.
EOF
    exit 255
fi

function running {
    if [ -e "$PIDFILE" ]; then
        ps $(cat "$PIDFILE") 2>&1 >/dev/null || rm "$PIDFILE"
    fi
    [ -e "$PIDFILE" ]
}

function set_note {
    [ $# -eq 1 ] || { echo "Error: set_note takes exactly 1 argument"; exit 1; }
    echo "$1" > "$CURRENT_NOTE"
}

function take_screenshot {
    DAY_DIR="$TARGET_DIR/$(date "$DATE_DIR_FORMAT")"
    [ -d "$DAY_DIR" ] || mkdir -p "$DAY_DIR"
    NOTE="$(cat "$CURRENT_NOTE")"
    FILENAME="${DAY_DIR}/$(date "$DATE_FILE_FORMAT") ($NOTE).png"
    import -window root "$FILENAME"
    DURATION="$(date -u -d "@$(expr $(date +%s) - $(stat -c %Z "$CURRENT_NOTE"))" +%R)"
    MESSAGE="What you have been doing now, at $(date +%R) ?\nCurrent streak: $DURATION"
    NEW_NOTE="$(zenity --entry --entry-text="$NOTE" --text="$MESSAGE" || echo "$NOTE" )"
    if [ "$NOTE" != "$NEW_NOTE" ]; then
        rename "($NOTE)" "($NEW_NOTE)" "$FILENAME"
        set_note "$NEW_NOTE"
    fi
}

function take_screenshots {
    SLEEP_PID=''
    DELAY="${1:-0}"
    trap 'kill ${SLEEP_PID}; rm ${PIDFILE}; trap - INT QUIT TERM EXIT; exit' INT QUIT TERM EXIT
    if [ "$DELAY" -gt 0 ]; then
        sleep "$DELAY" &
        SLEEP_PID="$!"
        wait "$SLEEP_PID"
    fi
    while true; do
        "$SELF" take
        sleep $INTERVAL &
        SLEEP_PID="$!"
        wait "$SLEEP_PID"
    done
}

function start_taking_screenshots {
    while getopts d: name; do
        case "$name" in
        d) DELAY="$OPTARG";;
        esac
    done
    if running ; then
        echo "Screenlog is already running as process $(cat ${PIDFILE})"
    else
        take_screenshots $DELAY &
        echo $! > "$PIDFILE"
        echo "Started taking screenshots"
    fi
}

function stop_taking_screenshots {
    if running ; then
        PID="$(cat "$PIDFILE")"
        kill "$PID"
        while kill -0 $PID 2>/dev/null ; do
            sleep 0.1
        done
        echo "Stopped taking screenshots"
    else
        echo "Screenlog is not running"
    fi
}

function status {
    if [ -e "$PIDFILE" ]; then
        cat "$PIDFILE"
        ps `cat "$PIDFILE"`
    else
        echo "Screenlog is stopped"
    fi
}

function today {
    DAY_DIR="$TARGET_DIR/$(date "$DATE_DIR_FORMAT")"
    ls -1 "$DAY_DIR" | sed 's/^[^(]*(\(.*\)).png$/\1/' | sort | uniq -c | awk '
    {allmin = $i*5; m = allmin % 60; h = (allmin - m)/60; $1 = sprintf("%d:%02d",h, m) ;print}' | sort -r
}

function annotate {
    RENAME_CMD='perl-rename -v'
    DATE_D='today'
    FROM=''
    TO='end'
    while getopts d:f:t:n name; do
        case "$name" in
        d) DATE_D="$OPTARG";;
        f) FROM="$OPTARG";;
        t) TO="$OPTARG";;
        n) RENAME_CMD="$RENAME_CMD -n";;
        esac
    done
    shift $(($OPTIND-1))
    MESSAGE="$*"
    echo "date:$DATE_D from:$FROM to:$TO"
    pushd "$TARGET_DIR/$(date -d "$DATE_D" "$DATE_DIR_FORMAT")"
    ls | sed -n -e "/^${FROM}/,/^${TO}/p" | xargs -d "\n" $RENAME_CMD "s/\(.*\)/(${MESSAGE})/" --
    popd
}

CMD="$1"
shift

case "$CMD" in
    "take")
        take_screenshot
        ;;
    "start")
        start_taking_screenshots "$@"
        ;;
    "stop")
        stop_taking_screenshots
        ;;
    "restart")
        stop_taking_screenshots
        exec "$SELF" start "$@"
        ;;
    "status")
        status
        ;;
    "today")
        today
        ;;
    "annotate")
        annotate "$@"
        ;;
    *)
        echo "unknown command \"$CMD\"" 1>&2
        exit 1
        ;;
esac
